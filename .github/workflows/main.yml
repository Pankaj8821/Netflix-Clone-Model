name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  IMAGE_NAME: netflix:${{ github.run_number }}
  REPO_IMAGE: shailesh49/netflix:${{ github.run_number }}
  REPO_IMAGE_LATEST: shailesh49/netflix:latest
  DOCKER_SCOUT_CACHE_DIR: /tmp/docker-scout-cache
  SCOUT_BIN: ${{ github.workspace }}/.scout-bin

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # -------- Workspace --------
      - name: Checkout Code
        uses: actions/checkout@v3

   

      # -------- Install Dependencies --------
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Dependencies
        run: npm install

      # 2 Setup JDK (SonarQube Scanner needs Java)
      # - name: Setup JDK
      #   uses: actions/setup-java@v4
      #   with:
      #     distribution: temurin
      #     java-version: '17'
      # #  SonarQube Analysis
      # - name: SonarQube Analysis
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # same as sonar-token in Jenkins
      #   with:
      #     args: >
      #       -Dsonar.host.url=https://sonar-server   # replace with your SonarQube server
      #       -Dsonar.projectKey=netflix             
      #       -Dsonar.projectName=netflix             
      #       -Dsonar.sources=.
      # # ---- SonarQube Quality Gate Check ---
      # - name: SonarQube Quality Gate
      #   uses: SonarSource/sonarqube-quality-gate-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: https://sonar-server

  
   # -------- OWASP Dependency Check --------
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
         project: "netflix"
         path: "."
         format: "ALL"
         out: "reports"
         args: "--disableYarnAudit"



      - name: Upload Dependency Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports
       # Build Docker Images 
      - name: Build Docker Image
        run: docker build -t ${{ env.REPO_IMAGE }} .
       #  Setup Trivy
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.4
        with:
         version: v0.66.0   # Optional: pin to a specific Trivy version
         cache: true        # Optional: enable caching

      # -------- Trivy --------
      # - name: Install Trivy
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     version: latest

      - name: Trivy FS Scan
        run: trivy fs --exit-code 0 --severity HIGH,CRITICAL .

      # - name: Trivy Image Scan (Docker Image)
      #   run: trivy image --exit-code 0 --no-progress ${{ env.REPO_IMAGE }}

        # Optional: Fail on high/critical vulnerabilities
      - name: Trivy Image Scan (fail on HIGH/CRITICAL)
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ env.REPO_IMAGE }}

      # -------- Docker Build & Push --------
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        run: |
      
          docker push $REPO_IMAGE
          docker tag $REPO_IMAGE $REPO_IMAGE_LATEST
          docker push $REPO_IMAGE_LATEST

      # Docker Generate Scout CVEs
      - name: Run Docker Scout CVEs analysis
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.REPO_IMAGE }}
          only-severities: critical,high
          only-fixed: true
          github-token: ${{ secrets.GITHUB_TOKEN }}


      #  Generate  Docker Scout SBOM
      - name: Generate Docker SBOM
        uses: docker/scout-action@v1
        with:
          command: sbom
          image: ${{ env.REPO_IMAGE }}




  

      # -------- Cleanup --------
      - name: Cleanup Docker Images
        run: |
          docker rmi $IMAGE_NAME || true
          docker rmi $REPO_IMAGE || true
          docker rmi $REPO_IMAGE_LATEST || true

  # -------- Optional: Trigger CD Pipeline --------
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Trigger CD Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: "CD - Update Kubernetes Manifests"
          ref: main
          token: ${{ secrets.PAT_TOKEN1 }}
          inputs: |
            {
              "REPO_IMAGE": "${{ env.REPO_IMAGE }}",
              "IMAGE_NAME": "${{ env.IMAGE_NAME }}"
            }



