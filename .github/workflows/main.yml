name: CI Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'Kubernetes/**'
  pull_request:
    branches:
      - main

permissions:
   contents: read
   pull-requests: write


env:
  IMAGE_NAME: netflix:${{ github.run_number }}
  REPO_IMAGE: pankaj6262/netflix:${{ github.run_number }}
  REPO_IMAGE_LATEST: pankaj6262/netflix:latest
  DOCKER_SCOUT_CACHE_DIR: /tmp/docker-scout-cache
  SCOUT_BIN: ${{ github.workspace }}/.scout-bin

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # -------- Workspace --------
      - name: Checkout Code
        uses: actions/checkout@v3

   

      # -------- Install Dependencies --------
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Dependencies
        run: npm install

         # -------- OWASP Dependency Check --------
      # - name: OWASP Dependency Check
      #   uses: dependency-check/Dependency-Check_Action@main
      #   with:
      #    project: "netflix"
      #    path: "."
      #    format: "ALL"
      #    out: "reports"
      #    args: "--disableYarnAudit"

      # - name: Upload Dependency Report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: dependency-check-report
      #     path: reports/**


     # 2 Setup JDK (SonarQube Scanner needs Java)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Install SonarScanner CLI
        run: |
          # cleanup any old/corrupt sonar-scanner install
          rm -rf $HOME/sonar-scanner-*
          
          # download fresh SonarScanner
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -o sonar-scanner.zip -d $HOME
          
          # add sonar-scanner to PATH
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH
      
      - name: Check SonarScanner Version
        run: sonar-scanner --version
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.projectKey=netflix
            -Dsonar.projectName=netflix
            -Dsonar.sources=.
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://103.142.199.241:9000

      
      # - name: Run SonarQube Scan pankaj
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     sonar-scanner -X \
      #       -Dsonar.host.url=http://103.142.199.241:9000 \
      #       -Dsonar.login=$SONAR_TOKEN \
      #       -Dsonar.projectKey=netflix \
      #       -Dsonar.projectName=netflix \
      #       -Dsonar.sources=.
      
      - name: SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://103.142.199.241:9000

      
      # - name: Install SonarScanner CLI
      #   run: |
      #     curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
      #     unzip -o sonar-scanner.zip -d $HOME
      #     export SONAR_SCANNER_HOME=$HOME/sonar-scanner-5.0.1.3006-linux
      #     echo "$SONAR_SCANNER_HOME/bin" >> $GITHUB_PATH
      
      # - name: Check SonarScanner Version
      #   run: sonar-scanner --version || true
      
      # # - name: Run SonarQube Scan
      # #   env:
      # #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # #   run: |
      # #     sonar-scanner \
      # #       -Dsonar.host.url=http://103.142.199.241:9000 \
      # #       -Dsonar.login=$SONAR_TOKEN \
      # #       -Dsonar.projectKey=netflix \
      # #       -Dsonar.projectName=netflix \
      # #       -Dsonar.sources=.

      # - name: Run SonarQube Scan
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     sonar-scanner -X \
      #       -Dsonar.host.url=http://103.142.199.241:9000 \
      #       -Dsonar.login=$SONAR_TOKEN \
      #       -Dsonar.projectKey=netflix \
      #       -Dsonar.projectName=netflix \
      #       -Dsonar.sources=.

      
      # - name: SonarQube Quality Gate
      #   uses: SonarSource/sonarqube-quality-gate-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: http://103.142.199.241:9000


  
        # Build Docker Images 
      - name: Build Docker Image
        run: docker build -t ${{ env.REPO_IMAGE }} .
         #  Setup Trivy
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.4
        with:
          version: v0.66.0   # Optional: pin to a specific Trivy version
          cache: true        # Optional: enable caching

      # -------- Trivy --------
      # - name: Install Trivy
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     version: latest

      - name: Trivy FS Scan
        run: trivy fs --exit-code 0 --severity HIGH,CRITICAL --format json --output reports/trivy-fs.json .

      # - name: Trivy Image Scan (Docker Image)
      #   run: trivy image --exit-code 0 --no-progress ${{ env.REPO_IMAGE }}

        # Optional: Fail on high/critical vulnerabilities
      - name: Trivy Image Scan (fail on HIGH/CRITICAL)
        run: trivy image --exit-code 1 --severity HIGH,CRITICAL --format json --output reports/trivy-image.json ${{ env.REPO_IMAGE }}

      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: reports/trivy-*.json

      # -------- Docker Build & Push --------
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        run: |
      
          docker push $REPO_IMAGE
          docker tag $REPO_IMAGE $REPO_IMAGE_LATEST
          docker push $REPO_IMAGE_LATEST

      # Docker Generate Scout CVEs
      - name: Run Docker Scout CVEs analysis
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.REPO_IMAGE }}
          only-severities: critical,high
          only-fixed: true
          output: reports/docker-scout-cves.json
          github-token: ${{ secrets.GITHUB_TOKEN }}


      #  Generate  Docker Scout SBOM
      - name: Generate Docker SBOM
        uses: docker/scout-action@v1
        with:
          command: sbom
          image: ${{ env.REPO_IMAGE }}
          output: reports/docker-scout-sbom.json
      # 
      - name: Upload Docker Scout Reports
        uses: actions/upload-artifact@v4
        with:
         name: docker-scout-reports
         path: reports/docker-scout-*.json

      # # -------- Email Security Reports --------
      # - name: Send Security Reports via Email
      #   uses: dawidd6/action-send-mail@v3
      #   with:
      #     server_address: smtp.gmail.com
      #     server_port: 465
      #     username: ${{ secrets.EMAIL_USER }}
      #     password: ${{ secrets.EMAIL_PASS }}
      #     subject: "Security Reports - Netflix CI Run #${{ github.run_number }}"
      #     to: "your-email@example.com"
      #     from: "GitHub CI <${{ secrets.EMAIL_USER }}>"
      #     body: |
      #       Hi Team,

      #       Please find attached the security reports generated in this CI run:

      #       - Dependency Check (OWASP)
      #       - Trivy (FS + Image)
      #       - Docker Scout (CVEs + SBOM)

      #       Regards,  
      #       GitHub Actions CI
      #     attachments: |
      #       reports/dependency-check/*
      #       reports/trivy-*.json
      #       reports/docker-scout-*.json

     # -------- Cleanup --------
      - name: Cleanup Docker Images
        run: |
          docker rmi $IMAGE_NAME || true
          docker rmi $REPO_IMAGE || true
          docker rmi $REPO_IMAGE_LATEST || true

  # -------- Optional: Trigger CD Pipeline --------
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Trigger CD Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: "CD - Update Kubernetes Manifests"
          ref: main
          token: ${{ secrets.PAT_TOKEN1 }}
          inputs: |
            {
              "REPO_IMAGE": "${{ env.REPO_IMAGE }}",
              "IMAGE_NAME": "${{ env.IMAGE_NAME }}"
            }



